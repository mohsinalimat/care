(function (DataTable) {
	'use strict';

	DataTable = DataTable && DataTable.hasOwnProperty('default') ? DataTable['default'] : DataTable;

	frappe.provide('frappe.data_import');

	frappe.data_import.DataExporter = class DataExporter {
		constructor(doctype, exporting_for) {
		var this$1 = this;

			this.doctype = doctype;
			this.exporting_for = exporting_for;
			frappe.model.with_doctype(doctype, function () {
				this$1.make_dialog();
			});
		}

		make_dialog() {
			var this$1 = this;

			this.dialog = new frappe.ui.Dialog({
				title: __('Export Data'),
				fields: [
					{
						fieldtype: 'Select',
						fieldname: 'export_records',
						label: __('Export Type'),
						options: [
							{
								label: __('All Records'),
								value: 'all'
							},
							{
								label: __('Filtered Records'),
								value: 'by_filter'
							},
							{
								label: __('5 Records'),
								value: '5_records'
							},
							{
								label: __('Blank Template'),
								value: 'blank_template'
							}
						],
						default: this.exporting_for === 'Insert New Records' ? 'blank_template' : 'all',
						change: function () {
							this$1.update_record_count_message();
						}
					},
					{
						fieldtype: 'HTML',
						fieldname: 'filter_area',
						depends_on: function (doc) { return doc.export_records === 'by_filter'; }
					},
					{
						fieldtype: 'Select',
						fieldname: 'file_type',
						label: __('File Type'),
						options: ['Excel', 'CSV'],
						default: 'CSV'
					},
					{
						fieldtype: 'Section Break'
					},
					{
						fieldtype: 'HTML',
						fieldname: 'select_all_buttons'
					},
					{
						label: __(this.doctype),
						fieldname: this.doctype,
						fieldtype: 'MultiCheck',
						columns: 2,
						on_change: function () { return this$1.update_primary_action(); },
						options: this.get_multicheck_options(this.doctype)
					} ].concat( frappe.meta.get_table_fields(this.doctype).map(function (df) {
						var doctype = df.options;
						var child_fieldname = df.fieldname;
						var label = df.reqd
							? // prettier-ignore
							  __('{0} ({1}) (1 row mandatory)', [__(df.label || df.fieldname), __(doctype)])
							: __('{0} ({1})', [__(df.label || df.fieldname), __(doctype)]);
						return {
							label: label,
							fieldname: child_fieldname,
							fieldtype: 'MultiCheck',
							columns: 2,
							on_change: function () { return this$1.update_primary_action(); },
							options: this$1.get_multicheck_options(doctype, child_fieldname)
						};
					})
				),
				primary_action_label: __('Export'),
				primary_action: function (values) { return this$1.export_records(values); },
				on_page_show: function () { return this$1.select_mandatory(); }
			});

			this.make_filter_area();
			this.make_select_all_buttons();
			this.update_record_count_message();

			this.dialog.show();
		}

		export_records() {
			var method =
				'/api/method/care.care.doctype.purchase_invoice_creation_tool.purchase_invoice_creation_tool.download_template';

			var multicheck_fields = this.dialog.fields
				.filter(function (df) { return df.fieldtype === 'MultiCheck'; })
				.map(function (df) { return df.fieldname; });

			var values = this.dialog.get_values();

			var doctype_field_map = Object.assign({}, values);
			for (var key in doctype_field_map) {
				if (!multicheck_fields.includes(key)) {
					delete doctype_field_map[key];
				}
			}

			var filters = null;
			if (values.export_records === 'by_filter') {
				filters = this.get_filters();
			}

			open_url_post(method, {
				doctype: this.doctype,
				file_type: values.file_type,
				export_records: values.export_records,
				export_fields: doctype_field_map,
				export_filters: filters
			});
		}

		make_filter_area() {
			var this$1 = this;

			this.filter_group = new frappe.ui.FilterGroup({
				parent: this.dialog.get_field('filter_area').$wrapper,
				doctype: this.doctype,
				on_change: function () {
					this$1.update_record_count_message();
				}
			});
		}

		make_select_all_buttons() {
			var for_insert = this.exporting_for === 'Insert New Records';
			var section_title = for_insert ? __('Select Fields To Insert') : __('Select Fields To Update');
			var $select_all_buttons = $(("\n\t\t\t<div>\n\t\t\t\t<h6 class=\"form-section-heading uppercase\">" + section_title + "</h6>\n\t\t\t\t<button class=\"btn btn-default btn-xs\" data-action=\"select_all\">\n\t\t\t\t\t" + (__('Select All')) + "\n\t\t\t\t</button>\n\t\t\t\t" + (for_insert ? ("<button class=\"btn btn-default btn-xs\" data-action=\"select_mandatory\">\n\t\t\t\t\t" + (__('Select Mandatory')) + "\n\t\t\t\t</button>"): '') + "\n\t\t\t\t<button class=\"btn btn-default btn-xs\" data-action=\"unselect_all\">\n\t\t\t\t\t" + (__('Unselect All')) + "\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t"));
			frappe.utils.bind_actions_with_object($select_all_buttons, this);
			this.dialog
				.get_field('select_all_buttons')
				.$wrapper.html($select_all_buttons);
		}

		select_all() {
			this.dialog.$wrapper
				.find(':checkbox')
				.prop('checked', true)
				.trigger('change');
		}

		select_mandatory() {
			var this$1 = this;
			var ref;

			var mandatory_table_fields = frappe.meta
				.get_table_fields(this.doctype)
				.filter(function (df) { return df.reqd; })
				.map(function (df) { return df.fieldname; });
			mandatory_table_fields.push(this.doctype);

			var multicheck_fields = this.dialog.fields
				.filter(function (df) { return df.fieldtype === 'MultiCheck'; })
				.map(function (df) { return df.fieldname; })
				.filter(function (doctype) { return mandatory_table_fields.includes(doctype); });

			var checkboxes = (ref = []).concat.apply(
				ref, multicheck_fields.map(function (fieldname) {
					var field = this$1.dialog.get_field(fieldname);
					return field.options
						.filter(function (option) { return option.danger; })
						.map(function (option) { return option.$checkbox.find('input').get(0); });
				})
			);

			this.unselect_all();
			$(checkboxes)
				.prop('checked', true)
				.trigger('change');
		}

		unselect_all() {
			var update_existing_records =
				this.dialog.get_value('exporting_for') == 'Update Existing Records';
			this.dialog.$wrapper
				.find(
					(":checkbox" + (update_existing_records ? ':not([data-unit=name])' : ''))
				)
				.prop('checked', false)
				.trigger('change');
		}

		update_record_count_message() {
			var this$1 = this;

			var export_records = this.dialog.get_value('export_records');
			var count_method = {
				all: function () { return frappe.db.count(this$1.doctype); },
				by_filter: function () { return frappe.db.count(this$1.doctype, {
						filters: this$1.get_filters()
					}); },
				blank_template: function () { return Promise.resolve(0); },
				'5_records': function () { return Promise.resolve(5); }
			};

			count_method[export_records]().then(function (value) {
				var message = '';
				value = parseInt(value, 10);
				if (value === 0) {
					message = __('No records will be exported');
				} else if (value === 1) {
					message = __('1 record will be exported');
				} else {
					message = __('{0} records will be exported', [value]);
				}
				this$1.dialog.set_df_property('export_records', 'description', message);

				this$1.update_primary_action(value);
			});
		}

		update_primary_action(no_of_records) {
			var $primary_action = this.dialog.get_primary_btn();

			if (no_of_records != null) {
				var label = '';
				if (no_of_records === 0) {
					label = __('Export');
				} else if (no_of_records === 1) {
					label = __('Export 1 record');
				} else {
					label = __('Export {0} records', [no_of_records]);
				}
				$primary_action.html(label);
			} else {
				var parent_fields = this.dialog.get_value(this.doctype);
				$primary_action.prop('disabled', parent_fields.length === 0);
			}
		}

		get_filters() {
			return this.filter_group.get_filters().map(function (filter) {
				return filter.slice(0, 4);
			});
		}

		get_multicheck_options(doctype, child_fieldname) {
			var this$1 = this;
			if ( child_fieldname === void 0 ) child_fieldname = null;

			if (!this.column_map) {
				this.column_map = get_columns_for_picker(this.doctype);
			}

			var autoname_field = null;
			var meta = frappe.get_meta(doctype);
			if (meta.autoname && meta.autoname.startsWith('field:')) {
				var fieldname = meta.autoname.slice('field:'.length);
				autoname_field = frappe.meta.get_field(doctype, fieldname);
			}

			var fields = child_fieldname
				? this.column_map[child_fieldname]
				: this.column_map[doctype];

			var is_field_mandatory = function (df) {
				if (df.reqd && this$1.exporting_for == 'Insert New Records') {
					return true;
				}
				if (autoname_field && df.fieldname == autoname_field.fieldname) {
					return true;
				}
				if (df.fieldname === 'name') {
					return true;
				}
				return false;
			};

			return fields
				.filter(function (df) {
					if (autoname_field && df.fieldname === 'name') {
						return false;
					}
					return true;
				})
				.map(function (df) {
					return {
						label: __(df.label),
						value: df.fieldname,
						danger: is_field_mandatory(df),
						checked: false,
						description: ((df.fieldname) + " " + (df.reqd ? __('(Mandatory)') : ''))
					};
				});
		}
	};

	function get_columns_for_picker(doctype) {
		var out = {};

		var exportable_fields = function (df) {
			var keep = true;
			if (frappe.model.no_value_type.includes(df.fieldtype)) {
				keep = false;
			}
			if (['lft', 'rgt'].includes(df.fieldname)) {
				keep = false;
			}
			return keep;
		};

		// parent
		var doctype_fields = frappe.meta
			.get_docfields(doctype)
			.filter(exportable_fields);

		out[doctype] = [
			{
				label: __('ID'),
				fieldname: 'name',
				fieldtype: 'Data',
				reqd: 1
			}
		].concat(doctype_fields);

		// children
		var table_fields = frappe.meta.get_table_fields(doctype);
		table_fields.forEach(function (df) {
			var cdt = df.options;
			var child_table_fields = frappe.meta
				.get_docfields(cdt)
				.filter(exportable_fields);

			out[df.fieldname] = [
				{
					label: __('ID'),
					fieldname: 'name',
					fieldtype: 'Data',
					reqd: 1
				}
			].concat(child_table_fields);
		});

		return out;
	}

	frappe.provide('frappe.data_import');

	frappe.data_import.ImportPreview = class ImportPreview {
		constructor(ref) {
		var this$1 = this;
		var wrapper = ref.wrapper;
		var doctype = ref.doctype;
		var preview_data = ref.preview_data;
		var frm = ref.frm;
		var import_log = ref.import_log;
		var events = ref.events; if ( events === void 0 ) events = {};

			this.wrapper = wrapper;
			this.doctype = doctype;
			this.preview_data = preview_data;
			this.events = events;
			this.import_log = import_log;
			this.frm = frm;

			frappe.model.with_doctype(doctype, function () {
				this$1.refresh();
			});
		}

		refresh() {
			this.data = this.preview_data.data;
			this.make_wrapper();
			this.prepare_columns();
			this.prepare_data();
			this.render_datatable();
			this.setup_styles();
			this.add_actions();
		}

		make_wrapper() {
			this.wrapper.html("\n\t\t\t<div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-sm-12\">\n\t\t\t\t\t\t<div class=\"table-actions margin-bottom\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"table-preview border\"></div>\n\t\t\t\t\t\t<div class=\"table-message\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t");
			frappe.utils.bind_actions_with_object(this.wrapper, this);

			this.$table_preview = this.wrapper.find('.table-preview');
		}

		prepare_columns() {
			this.columns = this.preview_data.columns.map(function (col, i) {
				var df = col.df;
				var column_width = 120;
				if (col.header_title === 'Sr. No') {
					return {
						id: 'srno',
						name: 'Sr. No',
						content: 'Sr. No',
						editable: false,
						focusable: false,
						align: 'left',
						width: 60
					};
				}

				if (col.skip_import) {
					var show_warnings_button = "<button class=\"btn btn-xs\" data-action=\"show_column_warning\" data-col=\"" + i + "\">\n\t\t\t\t\t<i class=\"octicon octicon-stop\"></i></button>";
					if (!col.df) {
						// increase column width for unidentified columns
						column_width += 50;
					}
					var column_title$1 = "<span class=\"indicator red\">\n\t\t\t\t\t" + (col.header_title || ("<i>" + (__('Untitled Column')) + "</i>")) + "\n\t\t\t\t\t" + (!col.df ? show_warnings_button : '') + "\n\t\t\t\t</span>";
					return {
						id: frappe.utils.get_random(6),
						name: col.header_title || (df ? df.label : 'Untitled Column'),
						content: column_title$1,
						skip_import: true,
						editable: false,
						focusable: false,
						align: 'left',
						width: column_width,
						format: function (value) { return ("<div class=\"text-muted\">" + value + "</div>"); }
					};
				}

				var date_format = col.date_format
					? col.date_format
						.replace('%Y', 'yyyy')
						.replace('%y', 'yy')
						.replace('%m', 'mm')
						.replace('%d', 'dd')
						.replace('%H', 'HH')
						.replace('%M', 'mm')
						.replace('%S', 'ss')
						.replace('%b', 'Mon')
					: null;

				var column_title = "<span class=\"indicator green\">\n\t\t\t\t" + (col.header_title || df.label) + "\n\t\t\t\t" + (date_format ? ("(" + date_format + ")") : '') + "\n\t\t\t</span>";

				return {
					id: df.fieldname,
					name: col.header_title,
					content: column_title,
					df: df,
					editable: false,
					align: 'left',
					width: column_width
				};
			});
		}

		prepare_data() {
			this.data = this.data.map(function (row) {
				return row.map(function (cell) {
					if (cell == null) {
						return '';
					}
					return cell;
				});
			});
		}

		render_datatable() {
			if (this.datatable) {
				this.datatable.destroy();
			}

			this.datatable = new DataTable(this.$table_preview.get(0), {
				data: this.data,
				columns: this.columns,
				layout: this.columns.length < 10 ? 'fluid' : 'fixed',
				cellHeight: 35,
				serialNoColumn: false,
				checkboxColumn: false,
				noDataMessage: __('No Data'),
				disableReorderColumn: true
			});

			var ref = this.preview_data;
			var max_rows_exceeded = ref.max_rows_exceeded;
			var max_rows_in_preview = ref.max_rows_in_preview;
			var total_number_of_rows = ref.total_number_of_rows;
			if (max_rows_exceeded) {
				var parts = [max_rows_in_preview, total_number_of_rows];
				this.wrapper.find('.table-message').html(("\n\t\t\t\t<div class=\"text-muted margin-top text-medium\">\n\t\t\t\t" + (__('Showing only first {0} rows out of {1}', parts)) + "\n\t\t\t\t</div>\n\t\t\t"));
			}

			if (this.data.length === 0) {
				this.datatable.style.setStyle('.dt-scrollable', {
					height: 'auto'
				});
			}

			this.datatable.style.setStyle('.dt-dropdown', {
				display: 'none'
			});
		}

		setup_styles() {
			var this$1 = this;

			// import success checkbox
			this.datatable.style.setStyle("svg.import-success", {
				width: '16px',
				fill: frappe.ui.color.get_color_shade('green', 'dark')
			});
			// make successfully imported rows readonly
			var row_classes = this.datatable
				.getRows()
				.filter(function (row) { return this$1.is_row_imported(row); })
				.map(function (row) { return row.meta.rowIndex; })
				.map(function (i) { return (".dt-row-" + i + " .dt-cell"); })
				.join(',');
			this.datatable.style.setStyle(row_classes, {
				pointerEvents: 'none',
				backgroundColor: frappe.ui.color.get_color_shade('gray', 'extra-light'),
				color: frappe.ui.color.get_color_shade('gray', 'dark')
			});
		}

		add_actions() {
			var actions = [
				{
					label: __('Map Columns'),
					handler: 'show_column_mapper',
					condition: this.frm.doc.status !== 'Success'
				},
				{
					label: __('Export Errored Rows'),
					handler: 'export_errored_rows',
					condition: this.import_log.filter(function (log) { return !log.success; }).length > 0
				},
				{
					label: __('Show Warnings'),
					handler: 'show_warnings',
					condition: this.preview_data.warnings.length > 0
				}
			];

			var html = actions
				.filter(function (action) { return action.condition; })
				.map(function (action) {
					return ("<button class=\"btn btn-sm btn-default\" data-action=\"" + (action.handler) + "\">\n\t\t\t\t\t" + (action.label) + "\n\t\t\t\t</button>\n\t\t\t");
				});

			this.wrapper.find('.table-actions').html(html);
		}

		export_errored_rows() {
			this.frm.trigger('export_errored_rows');
		}

		show_warnings() {
			this.frm.scroll_to_field('import_warnings');
		}

		show_column_warning(_, $target) {
			var $warning = this.frm
				.get_field('import_warnings')
				.$wrapper.find(("[data-col=" + ($target.data('col')) + "]"));
			frappe.utils.scroll_to($warning, true, 30);
		}

		show_column_mapper() {
			var this$1 = this;

			var column_picker_fields = get_columns_for_picker(this.doctype);
			var changed = [];
			var fields = this.preview_data.columns.map(function (col, i) {
				var df = col.df;
				if (col.header_title === 'Sr. No') { return []; }

				var fieldname;
				if (!df) {
					fieldname = null;
				} else if (col.map_to_field) {
					fieldname = col.map_to_field;
				} else if (col.is_child_table_field) {
					fieldname = (col.child_table_df.fieldname) + "." + (df.fieldname);
				} else {
					fieldname = df.fieldname;
				}
				return [
					{
						label: '',
						fieldtype: 'Data',
						default: col.header_title,
						fieldname: ("Column " + i),
						read_only: 1
					},
					{
						fieldtype: 'Column Break'
					},
					{
						fieldtype: 'Autocomplete',
						fieldname: i,
						label: '',
						max_items: Infinity,
						options: [
							{
								label: __("Don't Import"),
								value: "Don't Import"
							}
						].concat(get_fields_as_options(this$1.doctype, column_picker_fields)),
						default: fieldname || "Don't Import",
						change: function change() {
							changed.push(i);
						}
					},
					{
						fieldtype: 'Section Break'
					}
				];
			});
			// flatten the array
			fields = fields.reduce(function (acc, curr) { return acc.concat( curr); });
			var file_name = (this.frm.doc.import_file || '').split('/').pop();
			var parts = [file_name.bold(), this.doctype.bold()];
			fields = [
				{
					fieldtype: 'HTML',
					fieldname: 'heading',
					options: ("\n\t\t\t\t\t<div class=\"margin-top text-muted\">\n\t\t\t\t\t" + (__('Map columns from {0} to fields in {1}', parts)) + "\n\t\t\t\t\t</div>\n\t\t\t\t")
				},
				{
					fieldtype: 'Section Break'
				}
			].concat(fields);

			var dialog = new frappe.ui.Dialog({
				title: __('Map Columns'),
				fields: fields,
				primary_action: function (values) {
					var changed_map = {};
					changed.map(function (i) {
						var header_row_index = i - 1;
						changed_map[header_row_index] = values[i];
					});
					if (changed.length > 0) {
						this$1.events.remap_column(changed_map);
					}
					dialog.hide();
				}
			});
			dialog.$body.addClass('map-columns');
			dialog.show();
		}

		is_row_imported(row) {
			var serial_no = row[0].content;
			return this.import_log.find(function (log) {
				return log.success && log.row_indexes.includes(serial_no);
			});
		}
	};

	function get_fields_as_options(doctype, column_map) {
		var ref;

		var keys = [doctype];
		frappe.meta.get_table_fields(doctype).forEach(function (df) {
			keys.push(df.fieldname);
		});
		// flatten array
		return (ref = []).concat.apply(
			ref, keys.map(function (key) {
				return column_map[key].map(function (df) {
					var label = df.label;
					var value = df.fieldname;
					if (doctype !== key) {
						var table_field = frappe.meta.get_docfield(doctype, key);
						label = (df.label) + " (" + (table_field.label) + ")";
						value = (table_field.fieldname) + "." + (df.fieldname);
					}
					return {
						label: label,
						value: value,
						description: value
					};
				});
			})
		);
	}

}(DataTable));
//# sourceMappingURL=data_import_tools1.min.js.map
